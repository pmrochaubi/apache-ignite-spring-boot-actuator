import java.util.concurrent.TimeUnit

plugins {
	id 'org.springframework.boot' version '2.1.3.RELEASE'
	id 'java'
	id 'idea'
	id 'groovy'
	id 'io.franzbecker.gradle-lombok' version '1.11'
}

apply plugin: 'io.spring.dependency-management'

group = 'com.ubiwhere'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
	mavenLocal()
	jcenter()
}

// Java Lombok
lombok { // optional: values below are the defaults
	version = lombokVersion
	sha256 = "3ca225ce3917eac8bf4b7d2186845df4e70dcdede356dca8537b6d78a535c91e"
}

dependencies {

	// Spring Boot
	implementation('org.springframework.boot:spring-boot-starter-web:'+springBootVersion) {
		exclude(module: 'spring-boot-starter-tomcat')
	}
	implementation 'org.springframework.boot:spring-boot-starter-cache:'+springBootVersion
	implementation 'org.springframework.boot:spring-boot-starter-undertow:'+springBootVersion
	implementation 'org.springframework.boot:spring-boot-starter-actuator:'+springBootVersion

	// Apache Ignite
	implementation 'org.apache.ignite:ignite-indexing:'+apacheIgniteVersion
	implementation 'org.apache.ignite:ignite-spring:'+apacheIgniteVersion
	implementation 'org.apache.ignite:ignite-kubernetes:'+apacheIgniteVersion
	implementation fileTree(dir: 'libs', include: '*.jar')


	// Spring
	testImplementation 'org.springframework.boot:spring-boot-starter-test:'+springBootVersion

	// TestNG
	testImplementation 'org.testng:testng:'+testngVersion
	testImplementation 'org.uncommons:reportng:'+reportngVersion
	testImplementation 'com.google.inject:guice:'+guiceVersion


	// Mocking
	testImplementation ('org.powermock:powermock-module-testng:'+powerMockVersion) {
		exclude(module: 'testng')
		exclude(module: 'powermock-core')
		exclude(module: 'powermock-reflect')
	}
	testImplementation 'org.powermock:powermock-api-mockito2:'+powerMockVersion
	testImplementation 'net.andreinc.mockneat:mockneat:'+mockneatVersion

	// - Assert J
	testImplementation 'org.assertj:assertj-core:'+assertjVersion
}


test {


	// https://github.com/dev9com/gradle-example/blob/master/build.gradle
	useTestNG() {

		//Here is where you can add listeners for testng and add the reporting for reportng
		listeners << 'org.uncommons.reportng.HTMLReporter'
		listeners << 'org.uncommons.reportng.JUnitXMLReporter'
		//suites 'config/testng.xml'

	}

	//Disable the default groovy html reports since ReportNG is being used
	reports.html.enabled = false

	//Interceptors
	beforeTest { desc ->

		println "\n*** Starting execution of test ${desc.className}." + removeTestArguments(desc.name) + " ***"
	}
	afterTest { descriptor, result ->
		println "<<< Test " + removeTestArguments(descriptor.name) + " resulted in ${result.resultType} and took "+getElaspedTime(result.endTime - result.startTime)+" >>>\n"
	}

	//Modify the test logging
	testLogging {
		showStandardStreams = true
		exceptionFormat "full"
	}

}



//Example of being able to use methods inside the build file
def getElaspedTime(def time) {

	if(time / 1000 < 1)
	{
		return String.format("0 min, %.3f sec", time/1000)
	}
	else
	{
		return String.format("%d min, %d sec",
				TimeUnit.MILLISECONDS.toMinutes(time),
				TimeUnit.MILLISECONDS.toSeconds(time) -
						TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(time))

		)
	}
}

def removeTestArguments(def string) {

	def indexOf = string.indexOf("(");
	if (indexOf > 0) {
		return string.substring(0,indexOf);
	}

	return string;

}
